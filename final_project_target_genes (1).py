# -*- coding: utf-8 -*-
"""Final_project_Target_Genes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10fuFnKR2eEdSJD7RCKdVeuJMh9pfRt7G
"""

pip install python-docx

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

#import Doc
from docx import Document
from docx.shared import Inches

#import the data from drive
from google.colab import drive
drive.mount('/content/drive')


#DataS1a-NANOG Target Genes Full List.txt , DataS1c-Transcription Factors of NANOG.txt , DataS1b-Percentile Ranked-Cancer Stem Cell Markers-1.docx

df_Target_Genes = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DataS1a-NANOG Target Genes Full List.txt', sep='\t')

df_Transcription_Factors = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DataS1c-Transcription Factors of NANOG.txt', sep='\t')

df_Stem_Cell_Markers = Document('/content/drive/MyDrive/Colab Notebooks/DataS1b-Percentile Ranked-Cancer Stem Cell Markers-1.docx')

# df_Target_Genes
df_Target_Genes.head()

#df_Transcription_Factors
df_Transcription_Factors.head()

#df_Stem_Cell_Markers lines
#print head
for line in df_Stem_Cell_Markers.paragraphs:
  print(line.text)

"""# Cleaning/Organizing data"""

# Create a new data frame to store the name of the gene and the percentile rank

df_Stem_Cell_Markers_Clean = pd.DataFrame(columns=['Gene', 'Percentile Rank'])

#add them manually because it's easier rn

cell_markers = [ ["ABCB5", " "], ["ALCAM", 13170], ["ALDH1A1", 9589], ['RALDH1', 9589], ['ALDH1A3',3352], ['ATXN1',8203], ['BMI1', 5495], ['CD24', ' '], ['CD34', ' '], ['CD34', ' '], ['CD38', ' '],
                ['CD44', ' '], ['ENG', ' '], ['EVI-1', ' '], ['EVI5', 11996], ['ENGASE', 9431], ['ETFA', 6810], ['FLOT2', 12358], ['GATA3', 8442], ['ITGA2', 3527], ['ITGA4', 1500], ['CD49D', 1500],
                 ['ITGA6', 5634], ['ITGB1', 4561], ['ITGB3BP', 2531], ['KIT', 11903], ['CD117', 11903], ['MS4A1', ' '], ['MS4A18', 9073], ['MUC1', 4135], ['MUC15', 2680], ['PECAM1', 9658], ['PROM1', 4050],
                 ['PTPRC', ' '], ['THY1', 11390], ['EGF', 2340], ['ERBB2', 14122], ['HER-2', 14122], ['NEU', 14122], ['NEU1', 4057], ['NEU4', 12622], ['KITLG', 12071], ['SCF', 12071], ['LIN28B', 1929],
                 ['NOS2', ' '], ['iNOS', ' '], ['BMP7', 9333], ['DNMT1', 9698], ['FGFR2', 7487], ['KLF4', 6709], ['LIN28A', 882], ['MYC', 1980], ['NANOG', 7975], ['POU5F1', 18], ['OCT4', 18], ['SOX2', 6373],
                 ['FOXP1', 199], ['HDAC1', 5278], ['MYCN', 7301], ['SIRT1', 7517], ['WNT1', 422], ['AXL', 1746], ['ID1', 12352], ['CXCL8', 1805], ['IL8', 1805], ['KLF17', ' '], ['PLAT', 705], ['TPA',  705],
                 ['PLAUR', 4091], ['UPAR', 4091], ['SNAI1', 10659], ['TWIST1', 5037], ['TWIST2', 2920], ['ZEB1', 8768], ['ZEB2', 5767], ['DACH1', '6018'], ['FOXA2', '10278'], ['HNF3B', '10278'], ['PTCH1', '13411'],
                 ['LATS1', 1836], ['MERTK', 4041], ['SAV1', 11408], ['TAZ', 8586], ['WWC1', 207], ['YAP1', 3911], ['PTCH1', 13411], ['SMO', 3906], ['DLL1', 9596], ['DELTA1', 9596], ['DLL4', 8199],
                 ['JAG1', 12872], ['MAML1', 13461], ['NOTCH1', 1071], ['NOTCH2', ' '], ['DKK1', 2], ['EPCAM', 8337], ['FZD7', 5323], ['WNT1', 2910], ['ABCG2', 2205], ['BCRP', 2205], ['GSK3B', 2932],
                 ['IKBKB', 10978], ['JAK2', 9304], ['NFKB1', 966], ['ABCG2', 2205], ['BCRP', 2205], ['ATM', 7557], ['AXL', 1746], ['CHEK1', 796], ['DDR1', 11093], ['EPCAM', 8337], ['FZD7', 5323],
                 ['GSK3B', 7488], ['ID1', 12352], ['KLF17', ' '], ['NFKB1', ' '],['KLF25', 100], ['KLF213', 100], ['SMO', 3906], ['STAT3', 8293], ['TGFBR1', 7495], ['TGFBR2', 260],
                 ['WEE1', 3099]
                 ]

# add them to df_Stem_cell_markers_clean
for i in range(len(cell_markers)):
  df_Stem_Cell_Markers_Clean.loc[i] = cell_markers[i]


df_Stem_Cell_Markers_Clean.head()

"""## What is a NANOG Target gene

- Gene targeting is commonly referred to as the process in which a cellâ€™s recombination machinery integrates a piece of foreign DNA into its own genome at a target locus homologous to the foreign donor.

- NANOG (Nanog Homeobox) is a Protein Coding gene. Diseases associated with NANOG include Teratocarcinoma and Germ Cell And Embryonal Cancer. Among its related pathways are Gastrulation and Cytokine Signaling in Immune system.
"""

# Nanog gene target
# ALDH1A1 (RALDH1) 9589, ALDH1A3 3352
# CD34, DACH1 6018 , FOXA2 (HNF3B) 10278, REPETITIVE FROM PREV CATEGORY! PECAM1 9658, PTCH1 13411, JAK2 9304, NFKB1 966, KITLG (SCF) 12071, LIN28B 1929, NOS2 (iNOS)

"""## What is a Colorectal Cancer Stem-like **Cells** ?

- Colorectal cancer (CRC) is the second leading cause of death from cancer in the United States.
 - Colorectal cancer is usally someone is diagnosed with colorectal cancer roughly once every 23-25 people in their lifetime; however, the most common age for diagnosis is between 65 and 74 years.
"""

#

"""# Analysis on the highest target in terms of probability"""

# look for the closest number between 1 and 1780 in percentile rank in df_Stem_Cell_Markers_Clean

highest_percentile_rank_df = pd.DataFrame(columns=['Gene', 'Percentile Rank'])




for i in range(len(df_Stem_Cell_Markers_Clean)):
  # Access the 'Percentile Rank' value only once and convert to numeric
  percentile_rank = pd.to_numeric(df_Stem_Cell_Markers_Clean.loc[i, 'Percentile Rank'], errors='coerce')

  # Check if the percentile rank is within the desired range and is not NaN
  if 1 <= percentile_rank < 1780:
    #print the gene
    #print(df_Stem_Cell_Markers_Clean.loc[i, 'Gene'])
    #print the percentile rank
    #print(percentile_rank)
    highest_percentile_rank_df.loc[i] = [df_Stem_Cell_Markers_Clean.loc[i, 'Gene'], percentile_rank]

highest_percentile_rank_df.head()

# Scatter plot in base on highest_percentile_rank_gene

highest_percentile_rank_df['Percentile Rank'] = pd.to_numeric(highest_percentile_rank_df['Percentile Rank'], errors='coerce')

# Create the scatter plot, filtering out NaN values in 'Percentile Rank'
sns.scatterplot(x=highest_percentile_rank_df['Gene'],
                y=highest_percentile_rank_df['Percentile Rank'].dropna())
plt.show()

"""# Easiest way to dectect the gene"""

# Go through the detections methods and see which one happens more often,  in df_Transcription_Factors, df_Target_Genes
# inferred by curator
# chromatin immunoprecipitation assay

#Check on df_Transcription_Factors and df_Target_Genes  in Detection Method if they are detected by "chromatin immunoprecipitation"  or "inferred by curator"

detection_method_count = {}

for i in range(len(df_Transcription_Factors)):
  detection_method = df_Transcription_Factors.loc[i, 'Detection.method']
  if detection_method in detection_method_count:
    detection_method_count[detection_method] += 1
  else:
    detection_method_count[detection_method] = 1

for i in range(len(df_Target_Genes)):
  detection_method = df_Target_Genes.loc[i, 'Detection.method']
  if detection_method in detection_method_count:
    detection_method_count[detection_method] += 1
  else:
    detection_method_count[detection_method] = 1

print(detection_method_count)

#GRAPHSSSSSSSSSSSS
#bar graph in base of the detection method

plt.bar(detection_method_count.keys(), detection_method_count.values())
plt.xlabel('Detection Method')
plt.ylabel('Count')
plt.title('Detection Method Count')
plt.show()

# Pie chart
plt.pie(detection_method_count.values(), labels=detection_method_count.keys(), autopct='%1.1f%%')
plt.title('Detection Method Distribution')
plt.show()

"""# Analysis on most common genes found in humans

there is no database existent on most of common genes found so I decided to make one

-> Linear regression and  k-Nearest Neighbors
"""

most_common_genes_df = pd.DataFrame(columns=['Gene', 'UniprotID.TF', 'Description'])

common_genes = [ ["TP53", "P04637", 'Tumor Protein P53'], ['TNF', 'P19438', 'Tumor Necrosis Factor'], ['EGFR', 'P00533', 'Protein Coding'], ['VEGFA', 'P15692', 'Protein Coding'], ['APOE', 'P02649', 'Protein Coding'],
                ['IL6', 'P08887', 'Protein Coding'], ['TGFB1', 'P01137', 'Transforming growth factor Beta 1'], ['MTHFR', 'P42898', 'Methylenetetrahydrofolate Reductase'], ['ESR1', 'P03372', 'Protein Coding'],
                 ['AKT1', 'P31749', 'AKT Serine/Threonine Kinase 1'], ['CTNNB1', 'P35222', 'Catenin Beta 1'], ['AXL', 'P30530','AXL Receptor Tyrosine Kinase'] ]

#add the common_genes to most_common_genes_df
for i in range(len(common_genes)):
  most_common_genes_df.loc[i] = common_genes[i]

most_common_genes_df.head()

"""# Linear Regression"""



"""## Resources

https://pmc.ncbi.nlm.nih.gov/articles/PMC3047031/

https://pmc.ncbi.nlm.nih.gov/articles/PMC4941304/#:~:text=Herein%2C%20we%20investigated%20the%20chemosensitizing,chemotherapeutic%20drugs%20in%20CRC%20patients.

https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/LWLYP2

https://www.sciencedirect.com/topics/biochemistry-genetics-and-molecular-biology/gene-targeting

https://pathcards.genecards.org/card/colorectal_cancer_metastasis?search=Colorectal%20Cancer
"""

